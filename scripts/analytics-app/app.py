# app.py
from __future__ import annotations

import io
from pathlib import Path
from typing import Dict

import numpy as np
import pandas as pd
import streamlit as st

import plotly.express as px
import plotly.graph_objects as go

# ---- Unified config access (secrets/env) ----
def _cfg(key: str, default=None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ –∫–ª—é—á—É.
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Streamlit secrets -> –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è -> default.
    """
    try:
        # st —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤—ã—à–µ
        val = st.secrets.get(key, None)  # type: ignore[attr-defined]
        if val is not None:
            return val
    except Exception:
        pass
    import os
    return os.environ.get(key, default)

COGS_MODE = (_cfg("COGS_MODE", "NET") or "NET").upper()
RETURNS_ALERT_PCT = float(_cfg("RETURNS_ALERT_PCT", "5"))

# --- Granularity helpers & aggregation ---
def _has(df, cols):
    return (df is not None) and (not df.empty) and set(cols).issubset(df.columns)

@st.cache_data(ttl=600, show_spinner=False)
def aggregate_from_daily(daily: pd.DataFrame) -> dict:
    if daily is None or daily.empty or "date" not in daily.columns:
        return {"daily": pd.DataFrame(), "weekly": pd.DataFrame(), "monthly": pd.DataFrame()}

    d = daily.copy()
    d["date"] = pd.to_datetime(d["date"], errors="coerce")
    num_cols = [c for c in ["order_value_rub_sum","returns_rub","promo_rub",
                            "shipped_qty","returns_qty","shipments","cogs","margin"]
                if c in d.columns]
    for c in num_cols:
        d[c] = pd.to_numeric(d[c], errors="coerce").fillna(0)

    # DAY
    daily_agg = (d.groupby("date", as_index=False)
                   .agg({c: "sum" for c in num_cols})
                   .sort_values("date"))

    # WEEK: ISO-—Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    d["week_start"] = d["date"].dt.to_period("W-MON").apply(lambda r: r.start_time)
    weekly_agg = (d.groupby("week_start", as_index=False)
                    .agg({c: "sum" for c in num_cols})
                    .rename(columns={"week_start": "period"})
                    .sort_values("period"))

    # MONTH: —Å—Ç—Ä–æ–≥–æ –∏–∑ daily, —á—Ç–æ–±—ã –Ω–µ –∫–æ–ø–∏—Ç—å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
    d["month"] = d["date"].dt.to_period("M").dt.to_timestamp()
    monthly_agg = (d.groupby("month", as_index=False)
                     .agg({c: "sum" for c in num_cols})
                     .rename(columns={"month": "period"})
                     .sort_values("period"))

    return {"daily": daily_agg, "weekly": weekly_agg, "monthly": monthly_agg}

import sys
ROOT = Path(__file__).resolve().parents[2]      # .../my_ozon_analytics
SCRIPTS = Path(__file__).resolve().parents[1]   # .../my_ozon_analytics/scripts
for p in (str(SCRIPTS), str(ROOT)):
    if p not in sys.path:
        sys.path.append(p)

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–ø—Ä–æ—Å—Ç—ã–µ KPI –∏ –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ Plotly)
try:
    from kpis import kpi_row
except Exception:
    # Fallback: –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è KPI-—Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç –º–æ–¥—É–ª—è kpis.py
    def kpi_row(items):
        items = list(items)
        cols = st.columns(len(items))
        for col, item in zip(cols, items):
            if isinstance(item, dict):
                title = item.get("title", "")
                value = item.get("value", "")
            else:
                title, value = item
            with col:
                st.metric(title, value)

try:
    import charts
except Exception:
    import plotly.express as px
    import plotly.graph_objects as go
    class charts:  # fallback-–æ–±—ë—Ä—Ç–∫–∞
        @staticmethod
        def line(df, x, y, title=None, **kwargs):
            fig = px.line(df, x=x, y=y, title=title)
            return fig
        @staticmethod
        def bar(df, x, y, title=None, **kwargs):
            fig = px.bar(df, x=x, y=y, title=title)
            return fig
        @staticmethod
        def scatter(df, x, y, color=None, hover_data=None, title=None, **kwargs):
            fig = px.scatter(df, x=x, y=y, color=color, hover_data=hover_data, title=title)
            return fig
        @staticmethod
        def heatmap_pivot(pivot, title=None):
            fig = go.Figure(data=go.Heatmap(z=pivot.values, x=list(pivot.columns), y=list(pivot.index)))
            fig.update_layout(title=title)
            return fig

# Monte Carlo
try:
    import monte_carlo as mc
except Exception:
    mc = None

# –ü—ã—Ç–∞—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à data_loader, –Ω–æ –∏–º–µ—Ç—å —Ñ–æ–ª–ª–±–µ–∫
try:
    # –æ–∂–∏–¥–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: load_gold(dir_path) -> dict —Å –∫–ª—é—á–∞–º–∏: daily, monthly, analytics
    from data_loader import load_gold  # type: ignore
except Exception:
    load_gold = None  # fallback –Ω–∏–∂–µ

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–ø—Ä–æ–≥–Ω–æ–∑/–ø–ª–∞–Ω –∏ –¥–æ–ø—É—â–µ–Ω–∏—è)
try:
    from planner import ForecastPlanner, Assumptions as PlannerAssumptions  # type: ignore
except Exception:
    ForecastPlanner = None
    PlannerAssumptions = None


# ---------- –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ----------

st.set_page_config(
    page_title="Ozon Analytics & Planning",
    page_icon="üì¶",
    layout="wide",
)


# ---------- –ö–µ—à–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ----------

@st.cache_data(show_spinner=True)
def _fallback_load_gold(dir_path: str) -> dict:
    """–§–æ–ª–ª–±–µ–∫-–ª–æ–∞–¥–µ—Ä GOLD-—Å–ª–æ—è, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ data_loader."""
    base = Path(dir_path)
    daily = pd.read_csv(base / "fact_sku_daily.csv", encoding="utf-8-sig", low_memory=False)
    monthly = pd.read_csv(base / "fact_sku_monthly.csv", encoding="utf-8-sig", low_memory=False)
    mart = pd.read_csv(base / "mart_unit_econ.csv", encoding="utf-8-sig", low_memory=False)

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
    if "date" in daily.columns:
        daily["date"] = pd.to_datetime(daily["date"], errors="coerce")
    if "period" in monthly.columns:
        # –ø–µ—Ä–∏–æ–¥ –≤ YYYY-MM -> –ø–µ—Ä–∏–æ–¥ pandas
        monthly["period"] = pd.PeriodIndex(pd.to_datetime(monthly["period"], errors="coerce"), freq="M")

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è SKU –∫ —Å—Ç—Ä–æ–∫–µ
    for df in (daily, monthly, mart):
        if "sku" in df.columns:
            df["sku"] = df["sku"].astype(str).str.strip()

    return {"daily": daily, "monthly": monthly, "analytics": mart}


@st.cache_data(show_spinner=True)
def load_bundle(dir_path: str | Path) -> dict:
    if load_gold is not None:
        try:
            bundle = load_gold(dir_path)  # –æ–∂–∏–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ dataclass c .daily, .monthly, .analytics
            # –£–±–µ–¥–∏–º—Å—è –≤ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            if isinstance(bundle, dict):
                daily = bundle.get("daily")
                monthly = bundle.get("monthly")
                analytics = bundle.get("analytics")
            else:
                daily = getattr(bundle, "daily", None)
                monthly = getattr(bundle, "monthly", None)
                analytics = getattr(bundle, "analytics", None)
            assert isinstance(daily, pd.DataFrame) and isinstance(monthly, pd.DataFrame) and isinstance(analytics, pd.DataFrame)
            return {"daily": daily, "monthly": monthly, "analytics": analytics}
        except Exception:
            # —Ç–∏—Ö–æ —É—Ö–æ–¥–∏–º –≤ —Ñ–æ–ª–ª–±–µ–∫
            pass
    return _fallback_load_gold(dir_path)


def _format_money(x: float) -> str:
    try:
        return f"{x:,.0f} ‚ÇΩ".replace(",", " ")
    except Exception:
        return str(x)


def _format_pct(x: float) -> str:
    try:
        return f"{x:.1f}%"
    except Exception:
        return str(x)


# ---------- Sidebar: –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ----------

with st.sidebar:
    st.markdown("## ‚öôÔ∏è –î–∞–Ω–Ω—ã–µ")
    gold_dir = st.text_input(
        "–ü–∞–ø–∫–∞ GOLD (CSV)",
        value=str(ROOT / "gold"),
        help="–ü–∞–ø–∫–∞ —Å fact_sku_daily.csv, fact_sku_monthly.csv, mart_unit_econ.csv",
    )
    reload_btn = st.button("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å")

    st.markdown("---")
    page = st.radio(
        "–ù–∞–≤–∏–≥–∞—Ü–∏—è",
        ["–û–±–∑–æ—Ä", "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç", "SKU –¥–µ—Ç–∞–ª—å–Ω–æ", "Unit Economics", "ABC/XYZ", "–û—Å—Ç–∞—Ç–∫–∏", "Returns Lab", "Pricing & Promo", "Forecast vs Actual", "Risk (Monte Carlo)", "What-if", "About & Diagnostics"],
        index=0,
    )
    top_n = st.number_input("TOP N (–¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤)", min_value=5, max_value=50, value=10, step=5)

if reload_btn:
    load_bundle.clear()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ GOLD –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏
_gdir = Path(gold_dir)
if not _gdir.exists():
    st.error(f"–ü–∞–ø–∫–∞ GOLD –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {_gdir}")
    st.stop()


#
# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–±–æ—Ä–æ–≤ ----------
#
try:
    data = load_bundle(gold_dir)
    fact_daily: pd.DataFrame = data["daily"].copy()
    fact_monthly: pd.DataFrame = data["monthly"].copy()
    analytics: pd.DataFrame = data["analytics"].copy()
except Exception as e:
    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å GOLD –∏–∑ ¬´{gold_dir}¬ª. {e}")
    st.stop()

if analytics.empty:
    st.warning("–¢–∞–±–ª–∏—Ü–∞ analytics (mart_unit_econ.csv) –ø—É—Å—Ç–∞—è. –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ GOLD —á–µ—Ä–µ–∑ build_gold.py.")
    st.stop()

# –£–¥–æ–±–Ω—ã–µ —Å–ø–∏—Å–∫–∏/–∫–∞—Ä—Ç—ã
sku_list = sorted(analytics["sku"].astype(str).unique().tolist())
rev_sum = float(analytics.get("total_rev", pd.Series(dtype=float)).sum())
net_rev_sum = float(analytics.get("net_revenue", pd.Series(dtype=float)).sum())
margin_sum = float(analytics.get("margin", pd.Series(dtype=float)).sum())
returns_qty_sum = float(analytics.get("returns_qty", pd.Series(dtype=float)).sum())
promo_sum = float(analytics.get("promo_cost", pd.Series(dtype=float)).sum())

# --- Sidebar filters (depend on loaded data) ---
with st.sidebar:
    st.markdown("---")
    st.markdown("## üìÖ –§–∏–ª—å—Ç—Ä—ã")
    granularity = st.radio("–ì—Ä–∞–Ω—É–ª—è—Ä–Ω–æ—Å—Ç—å", ["–î–µ–Ω—å","–ù–µ–¥–µ–ª—è","–ú–µ—Å—è—Ü"], index=0, horizontal=True)
    date_from = st.date_input("–° –¥–∞—Ç—ã", value=pd.to_datetime("2025-01-01"))
    date_to   = st.date_input("–ü–æ –¥–∞—Ç—É", value=pd.to_datetime("today"))
    cogs_mode = st.selectbox("COGS —Ä–µ–∂–∏–º", ["NET", "GROSS"], index=(0 if COGS_MODE == "NET" else 1))
    # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ SKU
    _sku_list = sorted(analytics["sku"].astype(str).unique().tolist())
    selected_sku = st.multiselect("SKU", _sku_list[:50], max_selections=50)

# --- Apply filters ---
_daily = fact_daily.copy()
if "date" in _daily.columns:
    _daily = _daily[(pd.to_datetime(_daily["date"]) >= pd.to_datetime(date_from)) & (pd.to_datetime(_daily["date"]) <= pd.to_datetime(date_to))]

_monthly = fact_monthly.copy()
if "period" in _monthly.columns:
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ Timestamp –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    _monthly_period_ts = pd.to_datetime(_monthly["period"].astype(str), errors="coerce")
    mask = (_monthly_period_ts >= pd.to_datetime(date_from).to_period("M").to_timestamp()) & (_monthly_period_ts <= pd.to_datetime(date_to).to_period("M").to_timestamp())
    _monthly = _monthly.loc[mask]

if selected_sku:
    _daily = _daily[_daily["sku"].astype(str).isin(selected_sku)] if not _daily.empty else _daily
    _monthly = _monthly[_monthly["sku"].astype(str).isin(selected_sku)] if not _monthly.empty else _monthly

# --- Granularity series for trends ---
try:
    aggs = aggregate_from_daily(fact_daily)
except Exception:
    aggs = {"daily": pd.DataFrame(), "weekly": pd.DataFrame(), "monthly": pd.DataFrame()}

if granularity == "–î–µ–Ω—å":
    series_df = aggs["daily"].rename(columns={"date": "period"})
    sma_window = 7
elif granularity == "–ù–µ–¥–µ–ª—è":
    series_df = aggs["weekly"]
    sma_window = 4
else:
    series_df = aggs["monthly"]
    sma_window = 3


# ---------- –°—Ç—Ä–∞–Ω–∏—Ü—ã ----------

def page_overview():
    st.markdown("### üìä –û–±–∑–æ—Ä")
    col1, col2 = st.columns([2, 3])

    with col1:
        # KPI –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Å fallback –Ω–∞ analytics
        if not _daily.empty and {"order_value_rub_sum"}.issubset(_daily.columns):
            _rev = float(_daily["order_value_rub_sum"].sum())
        else:
            _rev = rev_sum
        _net = net_rev_sum  # –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–µ—Ç—Ç–æ –≤ daily –æ—Å—Ç–∞–≤–ª—è–µ–º –∏–∑ analytics
        _margin = margin_sum
        kpi_row([
            {"title": "–í–∞–ª–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞", "value": _format_money(_rev)},
            {"title": "–ß–∏—Å—Ç–∞—è –≤—ã—Ä—É—á–∫–∞", "value": _format_money(_net)},
            {"title": "–ú–∞—Ä–∂–∞ (–ò–¢–û–ì–û)", "value": _format_money(_margin)},
        ])
        # KPI (–¥–æ–ª—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤, –¥–æ–ª—è –ø—Ä–æ–º–æ, —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ SKU)
        # –í–æ–∑–≤—Ä–∞—Ç—ã ‚ÇΩ: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≥–æ—Ç–æ–≤–æ–π —Å—É–º–º—ã; –∏–Ω–∞—á–µ –æ—Ü–µ–Ω–∫–∞ avg_net_price_per_unit * returns_qty
        if "returns_rub" in analytics.columns:
            _returns_rub = float(analytics["returns_rub"].sum())
        elif {"avg_net_price_per_unit", "returns_qty"}.issubset(analytics.columns):
            _returns_rub = float((analytics["avg_net_price_per_unit"] * analytics["returns_qty"]).sum())
        else:
            _returns_rub = 0.0
        _promo_rub = float(_daily.get("promo_rub", pd.Series(dtype=float)).sum()) if not _daily.empty else float(promo_sum)
        # –†–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ SKU: –≤–æ–∑–≤—Ä–∞—Ç—ã% > RETURNS_ALERT_PCT –ø.–ø. –∏–ª–∏ –º–∞—Ä–∂–∞ < 0 (–µ—Å–ª–∏ —Å—Ç–æ–ª–±—Ü—ã –µ—Å—Ç—å)
        thr = float(RETURNS_ALERT_PCT)
        if {"returns_pct", "margin"}.issubset(analytics.columns):
            risk_cnt = int(((analytics["returns_pct"] > thr) | (analytics["margin"] < 0)).sum())
        elif "returns_pct" in analytics.columns:
            risk_cnt = int((analytics["returns_pct"] > thr).sum())
        elif "margin" in analytics.columns:
            risk_cnt = int((analytics["margin"] < 0).sum())
        else:
            risk_cnt = 0
        kpi_row([
            {"title": "–í–æ–∑–≤—Ä–∞—Ç—ã, %", "value": _format_pct((_returns_rub / _rev * 100) if _rev else 0)},
            {"title": "–ü—Ä–æ–º–æ, %", "value": _format_pct((_promo_rub / _rev * 100) if _rev else 0)},
            {"title": "SKU –≤ —Ä–∏—Å–∫–µ", "value": f"{risk_cnt}"},
        ])

    with col2:
        show_scatter = not analytics.get("total_rev", pd.Series([])).empty and not analytics.get("margin", pd.Series([])).empty
        if show_scatter:
            fig = charts.scatter(
                analytics.rename(columns={"total_rev": "revenue", "margin": "margin"}),
                x="revenue", y="margin", color="ABC_class" if "ABC_class" in analytics.columns else None,
                hover_data=["sku"], title="–ú–∞—Ä–∂–∞ vs –í—ã—Ä—É—á–∫–∞ –ø–æ SKU"
            )
            st.plotly_chart(fig, use_container_width=True)

    # –õ–∏–Ω–∏—è –≤—ã—Ä—É—á–∫–∏ + SMA (–∞–¥–∞–ø—Ç–∏–≤–Ω–æ: –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—è/–º–µ—Å—è—Ü)
    if _has(series_df, ["period", "order_value_rub_sum"]):
        ts = series_df[["period", "order_value_rub_sum"]].sort_values("period").copy()
        if len(ts) >= 2:
            ts["SMA"] = ts["order_value_rub_sum"].rolling(sma_window, min_periods=1).mean()
        st.plotly_chart(
            charts.line(ts, x="period", y=[c for c in ["order_value_rub_sum", "SMA"] if c in ts.columns],
                        title=f"–î–∏–Ω–∞–º–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏ ¬∑ {granularity}"),
            use_container_width=True,
        )
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏.")
# --- Diagnostics page ---
import sys as _sys_diag, platform as _platform_diag, io as _io_diag, json as _json_diag

def page_about_diag(fact_daily, fact_monthly, analytics, forecast):
    st.subheader("About & Diagnostics")
    st.write({
        "python": _sys_diag.version.split()[0],
        "platform": _platform_diag.platform(),
        "streamlit": st.__version__,
        "pandas": pd.__version__,
        "data_source": "GOLD_BASE_URL" if st.secrets.get("GOLD_BASE_URL") else "repo gold/"
    })
    def shape(df):
        return {"rows": int(len(df)),
                "cols": int(df.shape[1]) if not df.empty else 0,
                "columns": list(df.columns[:10]) if not df.empty else []}
    st.write({
        "fact_sku_daily": shape(fact_daily),
        "fact_sku_monthly": shape(fact_monthly),
        "mart_unit_econ": shape(analytics),
        "forecast_sku_monthly": shape(forecast),
    })
    def ssum(df, col):
        return float(pd.to_numeric(df.get(col, pd.Series(dtype=float)),
                                   errors="coerce").fillna(0).sum()) if not df.empty else 0.0
    snapshot = {
        "kpi_sums": {
            "order_value_rub_sum_daily": ssum(fact_daily, "order_value_rub_sum"),
            "shipped_qty_daily": ssum(fact_daily, "shipped_qty"),
            "returns_rub_daily": ssum(fact_daily, "returns_rub"),
            "returns_qty_daily": ssum(fact_daily, "returns_qty"),
            "cogs_mart": ssum(analytics, "cogs"),
            "margin_mart": ssum(analytics, "margin"),
        }
    }
    buf = _io_diag.StringIO(); _json_diag.dump(snapshot, buf, ensure_ascii=False, indent=2)
    st.download_button("–°–∫–∞—á–∞—Ç—å snapshot.json", buf.getvalue(),
                       file_name="snapshot.json", mime="application/json")

    # –¢–æ–ø-–ª–∏—Å—Ç
    st.markdown(f"#### –¢–û–ü-{int(top_n)} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö / —É–±—ã—Ç–æ—á–Ω—ã—Ö SKU")
    if "margin" in analytics.columns:
        base_cols = ["sku", "total_rev", "margin", "returns_pct", "promo_intensity_pct"]
        cols_present = [c for c in base_cols if c in analytics.columns]
        top = analytics.sort_values("margin", ascending=False).head(int(top_n))[cols_present]
        flop = analytics.sort_values("margin", ascending=True).head(int(top_n))[cols_present]
        rename_map = {
            "sku": "SKU",
            "total_rev": "–í—ã—Ä—É—á–∫–∞, ‚ÇΩ",
            "margin": "–ú–∞—Ä–∂–∞, ‚ÇΩ",
            "returns_pct": "–í–æ–∑–≤—Ä–∞—Ç—ã, %",
            "promo_intensity_pct": "–ü—Ä–æ–º–æ, %",
        }
        c1, c2 = st.columns(2)
        with c1:
            st.dataframe(top.rename(columns={k: v for k, v in rename_map.items() if k in cols_present}))
        with c2:
            st.dataframe(flop.rename(columns={k: v for k, v in rename_map.items() if k in cols_present}))
    else:
        st.info("–í analytics –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ 'margin' ‚Äî —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ GOLD —á–µ—Ä–µ–∑ build_gold.py.")

    # –ú–æ—Å—Ç–∏–∫ Unit Economics (–≤–æ–¥–æ–ø–∞–¥)
    st.markdown("#### –ú–æ—Å—Ç–∏–∫: –æ—Ç –≤–∞–ª–æ–≤–æ–π –≤—ã—Ä—É—á–∫–∏ –∫ –º–∞—Ä–∂–µ")
    # –ü–æ–¥–±–æ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ analytics
    gross_rev = float(analytics.get("total_rev", pd.Series(dtype=float)).sum())
    # –í–æ–∑–≤—Ä–∞—Ç—ã ‚ÇΩ ‚Äî –±–µ—Ä—ë–º 'returns_rub' –µ—Å–ª–∏ –µ—Å—Ç—å; –∏–Ω–∞—á–µ –æ—Ü–µ–Ω–∏–≤–∞–µ–º –∏–∑ avg_net_price_per_unit * returns_qty
    if "returns_rub" in analytics.columns:
        returns_rub = float(analytics["returns_rub"].sum())
    elif {"avg_net_price_per_unit", "returns_qty"}.issubset(analytics.columns):
        returns_rub = float((analytics["avg_net_price_per_unit"] * analytics["returns_qty"]).sum())
    else:
        returns_rub = 0.0
    # –ö–æ–º–∏—Å—Å–∏—è ‚ÇΩ ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≥–æ—Ç–æ–≤–æ–π —Å—É–º–º—ã; –∏–Ω–∞—á–µ –∫–æ–º–∏—Å—Å–∏—è/–µ–¥ * qty
    if "commission_total" in analytics.columns:
        commission_rub = float(analytics["commission_total"].sum())
    elif {"commission_per_unit", "total_qty"}.issubset(analytics.columns):
        commission_rub = float((analytics["commission_per_unit"] * analytics["total_qty"]).sum())
    else:
        commission_rub = 0.0
    # –ü—Ä–æ–º–æ ‚ÇΩ ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç promo_cost; –∏–Ω–∞—á–µ –ø—Ä–æ–º–æ/–µ–¥ * qty
    if "promo_cost" in analytics.columns:
        promo_rub = float(analytics["promo_cost"].sum())
    elif {"promo_per_unit", "total_qty"}.issubset(analytics.columns):
        promo_rub = float((analytics["promo_per_unit"] * analytics["total_qty"]).sum())
    else:
        promo_rub = 0.0
    # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ‚ÇΩ ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ COGS; –∏–Ω–∞—á–µ production_cost_per_unit * qty
    if "cogs" in analytics.columns:
        cogs_rub = float(analytics["cogs"].sum())
    elif {"production_cost_per_unit", "total_qty"}.issubset(analytics.columns):
        cogs_rub = float((analytics["production_cost_per_unit"] * analytics["total_qty"]).sum())
    else:
        cogs_rub = 0.0

    margin_total_calc = gross_rev - returns_rub - commission_rub - promo_rub - cogs_rub
    labels = [
        "–í–∞–ª–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞",
        "- –í–æ–∑–≤—Ä–∞—Ç—ã",
        "- –ö–æ–º–∏—Å—Å–∏—è",
        "- –ü—Ä–æ–º–æ",
        "- COGS",
        "–ú–∞—Ä–∂–∞ (–∏—Ç–æ–≥)",
    ]
    values = [
        gross_rev,
        -returns_rub,
        -commission_rub,
        -promo_rub,
        -cogs_rub,
        margin_total_calc,
    ]
    fig_wf = go.Figure(go.Waterfall(
        orientation="v",
        measure=["relative"] * (len(values) - 1) + ["total"],
        x=labels,
        y=values,
        connector={"line": {"color": "#888", "width": 1}},
    ))
    fig_wf.update_layout(
        template="plotly_white",
        margin=dict(l=8, r=8, t=48, b=8),
        title="–ú–æ—Å—Ç–∏–∫ Unit Economics",
    )
    st.plotly_chart(fig_wf, use_container_width=True)

# --- Returns Lab page ---
def page_returns_lab():
    st.markdown("### ‚ôªÔ∏è Returns Lab")
    # Scatter: –º–∞—Ä–∂–∞ vs –≤–æ–∑–≤—Ä–∞—Ç—ã
    if {"returns_pct", "margin"}.issubset(analytics.columns):
        fig_sc = px.scatter(analytics, x="returns_pct", y="margin", color=("category" if "category" in analytics.columns else None),
                            hover_data=[c for c in ["sku", "total_rev", "net_revenue"] if c in analytics.columns], title="–ú–∞—Ä–∂–∞ vs –í–æ–∑–≤—Ä–∞—Ç—ã, %")
        fig_sc.update_layout(template="plotly_white")
        st.plotly_chart(fig_sc, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ 'returns_pct' –∏ 'margin' –≤ analytics.")

    # Heatmap: –≤–æ–∑–≤—Ä–∞—Ç—ã –ø–æ –¥–Ω—è–º –∏ SKU
    if not _daily.empty and {"date", "sku"}.issubset(_daily.columns) and "returns_qty" in _daily.columns:
        pv = (_daily.pivot_table(index="sku", columns="date", values="returns_qty", aggfunc="sum").fillna(0))
        st.plotly_chart(charts.heatmap_pivot(pv, title="–í–æ–∑–≤—Ä–∞—Ç—ã –ø–æ –¥–Ω—è–º –∏ SKU"), use_container_width=True)
    else:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã (–Ω—É–∂–Ω—ã 'date', 'sku', 'returns_qty' –≤ daily).")

# --- Pricing & Promo Lab page ---
def page_pricing_promo():
    st.markdown("### üí∏ Pricing & Promo Lab")
    if not {"avg_net_price_per_unit", "production_cost_per_unit", "commission_per_unit", "promo_intensity_pct", "total_qty", "sku"}.issubset(analytics.columns):
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ analytics –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è/–ø—Ä–æ–º–æ.")
        return

    price_delta = st.slider("Œî –¶–µ–Ω–∞, %", -20, 20, 0)
    promo_delta = st.slider("Œî –ü—Ä–æ–º–æ, –ø.–ø.", -20, 20, 0)
    commission_delta = st.slider("Œî –ö–æ–º–∏—Å—Å–∏—è, –ø.–ø.", -10, 10, 0)

    df = analytics.copy()
    df["avg_net_price_per_unit_adj"] = df["avg_net_price_per_unit"] * (1 + price_delta/100)
    df["promo_intensity_pct_adj"] = (df["promo_intensity_pct"] + promo_delta).clip(0, 100)
    df["commission_per_unit_adj"] = df["commission_per_unit"] * (1 + commission_delta/100)

    df["margin_per_unit_adj"] = (
        df["avg_net_price_per_unit_adj"]
        - df["production_cost_per_unit"]
        - df["commission_per_unit_adj"]
        - (df["avg_net_price_per_unit_adj"] * df["promo_intensity_pct_adj"]/100)
    )
    df["margin_adj"] = df["margin_per_unit_adj"] * df["total_qty"]

    st.plotly_chart(charts.bar(df.nlargest(int(top_n), "margin_adj"), x="sku", y="margin_adj", title="–ú–∞—Ä–∂–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π", orientation="v", y_is_currency=True), use_container_width=True)

# --- Forecast vs Actual page ---
def page_fva():
    st.markdown("### üìà Forecast vs Actual")
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å forecast_sku_monthly.csv –∏–∑ —Ç–æ–π –∂–µ –ø–∞–ø–∫–∏ GOLD (–Ω–µ –∫—ç—à–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –∫—ç—à –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–∞–¥–µ—Ä–∞)
    try:
        forecast = pd.read_csv(Path(gold_dir) / "forecast_sku_monthly.csv", encoding="utf-8-sig", low_memory=False)
    except Exception:
        forecast = pd.DataFrame()

    if _monthly.empty:
        st.info("–ù–µ—Ç —Ñ–∞–∫—Ç–∞ –ø–æ –º–µ—Å—è—Ü–∞–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    fact = _monthly.groupby("period", as_index=False)["shipped_qty"].sum()

    if not forecast.empty and {"period", "forecast_qty"}.issubset(forecast.columns):
        m = fact.merge(forecast[["period", "forecast_qty"]], on="period", how="outer").fillna(0).sort_values("period")
        m["period_str"] = m["period"].astype(str)
        st.plotly_chart(charts.line(m, x="period_str", y=["shipped_qty", "forecast_qty"], title="Forecast vs Actual"), use_container_width=True)
    else:
        fact["period_str"] = fact["period"].astype(str)
        st.plotly_chart(charts.line(fact, x="period_str", y="shipped_qty", title="–§–∞–∫—Ç –æ—Ç–≥—Ä—É–∑–æ–∫ (–ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω)"), use_container_width=True)
# ---------- –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç" ----------

def page_assortment():
    st.markdown("### üß© –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç: –≤–∫–ª–∞–¥ SKU –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë; –∏–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ SKU
    cat_col = "category" if "category" in analytics.columns else None

    # Treemap: —Ä–∞–∑–º–µ—Ä = –≤—ã—Ä—É—á–∫–∞, —Ü–≤–µ—Ç = –º–∞—Ä–∂–∞
    base_cols = [c for c in ["sku", "total_rev", "margin", cat_col] if c is not None and c in analytics.columns]
    if {"sku", "total_rev"}.issubset(set(base_cols)):
        df_tm = analytics[base_cols].copy()
        path_cols = [cat_col, "sku"] if cat_col else ["sku"]
        fig_tm = px.treemap(df_tm, path=path_cols, values="total_rev", color=("margin" if "margin" in df_tm.columns else None),
                            color_continuous_scale="RdYlGn", title="Treemap: –≤–∫–ª–∞–¥ –≤ –≤—ã—Ä—É—á–∫—É")
        fig_tm.update_layout(margin=dict(l=8, r=8, t=48, b=8), template="plotly_white")
        st.plotly_chart(fig_tm, use_container_width=True)
    else:
        st.info("–î–ª—è treemap –Ω—É–∂–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ 'sku' –∏ 'total_rev'.")

    # Pareto 80/20 –ø–æ –≤—ã—Ä—É—á–∫–µ
    st.markdown("#### Pareto 80/20 –ø–æ –≤—ã—Ä—É—á–∫–µ")
    if {"sku", "total_rev"}.issubset(analytics.columns):
        d = analytics.groupby("sku", as_index=False)["total_rev"].sum().sort_values("total_rev", ascending=False)
        d["cum_pct"] = d["total_rev"].cumsum() / d["total_rev"].sum() * 100
        fig_p = go.Figure()
        fig_p.add_bar(x=d["sku"], y=d["total_rev"], name="–í—ã—Ä—É—á–∫–∞")
        fig_p.add_trace(go.Scatter(x=d["sku"], y=d["cum_pct"], yaxis="y2", mode="lines+markers", name="–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π %"))
        fig_p.update_layout(
            template="plotly_white",
            margin=dict(l=8, r=8, t=48, b=8),
            yaxis=dict(title="–í—ã—Ä—É—á–∫–∞, ‚ÇΩ"),
            yaxis2=dict(title="%", overlaying='y', side='right', range=[0, 100])
        )
        st.plotly_chart(fig_p, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è Pareto (–Ω—É–∂–Ω—ã 'sku' –∏ 'total_rev').")

    # –¢—Ä–µ–Ω–¥—ã –ø–æ–º–µ—Å—è—á–Ω–æ (–æ—Ç–≥—Ä—É–∑–∫–∏/–≤–æ–∑–≤—Ä–∞—Ç—ã)
    st.markdown("#### –¢—Ä–µ–Ω–¥—ã (–ø–æ–º–µ—Å—è—á–Ω–æ)")
    if not fact_monthly.empty and set(["period", "shipped_qty"]).issubset(fact_monthly.columns):
        agg = (
            fact_monthly.groupby("period", as_index=False)[["shipped_qty", "returns_qty"]]
            .sum()
            .sort_values("period")
        )
        agg["period_str"] = agg["period"].astype(str)
        fig_line = charts.line(agg, x="period_str", y="shipped_qty", title="–û—Ç–≥—Ä—É–∂–µ–Ω–æ, —à—Ç.")
        st.plotly_chart(fig_line, use_container_width=True)
        if "returns_qty" in agg.columns:
            fig_line2 = charts.line(agg, x="period_str", y="returns_qty", title="–í–æ–∑–≤—Ä–∞—Ç—ã, —à—Ç.")
            st.plotly_chart(fig_line2, use_container_width=True)


def page_sku_detail():
    st.markdown("### üîé SKU –¥–µ—Ç–∞–ª—å–Ω–æ")
    sku = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ SKU", options=sku_list, index=0)
    row = analytics.loc[analytics["sku"] == sku]
    if row.empty:
        st.info("–ù–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ analytics –¥–ª—è —ç—Ç–æ–≥–æ SKU.")
        return
    r = row.iloc[0].to_dict()

    # KPI
    kpi_row([
        {"title": "–í—ã—Ä—É—á–∫–∞ (–≤–∞–ª.)", "value": _format_money(float(r.get("total_rev", 0)))},
        {"title": "–ß–∏—Å—Ç–∞—è –≤—ã—Ä—É—á–∫–∞", "value": _format_money(float(r.get("net_revenue", 0)))},
        {"title": "–ú–∞—Ä–∂–∞", "value": _format_money(float(r.get("margin", 0)))},
    ])
    kpi_row([
        {"title": "–î–æ–ª—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤", "value": _format_pct(float(r.get("returns_pct", 0)))},
        {"title": "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ", "value": _format_pct(float(r.get("promo_intensity_pct", 0)))},
        {"title": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", "value": r.get("recommended_action", "‚Äî")},
    ])

    # –¢–∞–π–º—Å–µ—Ä–∏–∏ –ø–æ –º–µ—Å—è—Ü—É
    st.markdown("#### –î–∏–Ω–∞–º–∏–∫–∞ (–º–µ—Å—è—Ü)")
    sub = fact_monthly.loc[fact_monthly["sku"] == sku].copy()
    if not sub.empty and "period" in sub.columns:
        sub["period_str"] = sub["period"].astype(str)
        c1, c2 = st.columns(2)
        with c1:
            st.plotly_chart(charts.line(sub, x="period_str", y="shipped_qty", title="–û—Ç–≥—Ä—É–∂–µ–Ω–æ, —à—Ç."), use_container_width=True)
        with c2:
            if "returns_qty" in sub.columns:
                st.plotly_chart(charts.line(sub, x="period_str", y="returns_qty", title="–í–æ–∑–≤—Ä–∞—Ç—ã, —à—Ç."), use_container_width=True)

    # –¢–∞–±–ª–∏—á–∫–∞ unit-econ
    keep_cols = [
        "avg_price_per_unit","avg_net_price_per_unit","production_cost_per_unit",
        "commission_per_unit","promo_per_unit","margin_per_unit",
        "break_even_price","contribution_margin","margin_pct"
    ]
    st.markdown("#### Unit-economics (–µ–¥–∏–Ω–∏—Ü–∞)")
    st.dataframe(row[["sku"] + [c for c in keep_cols if c in row.columns]].reset_index(drop=True))

    # –í–æ–¥–æ–ø–∞–¥ Unit Economics –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É SKU
    r = row.iloc[0]
    rev = float(r.get("total_rev", 0))
    # –í–æ–∑–≤—Ä–∞—Ç—ã ‚ÇΩ ‚Äî –≥–æ—Ç–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –∏–ª–∏ –æ—Ü–µ–Ω–∫–∞
    if "returns_rub" in row.columns:
        returns_rub = float(r.get("returns_rub", 0))
    elif {"avg_net_price_per_unit", "returns_qty"}.issubset(row.columns):
        returns_rub = float(r.get("avg_net_price_per_unit", 0) * r.get("returns_qty", 0))
    else:
        returns_rub = 0.0
    commission_rub = float(r.get("commission_per_unit", 0) * r.get("total_qty", 0))
    promo_rub = float(r.get("promo_per_unit", 0) * r.get("total_qty", 0))
    cogs_rub = float(r.get("cogs", 0))

    labels = ["–í–∞–ª–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞", "- –í–æ–∑–≤—Ä–∞—Ç—ã", "- –ö–æ–º–∏—Å—Å–∏—è", "- –ü—Ä–æ–º–æ", "- COGS", "–ú–∞—Ä–∂–∞ (–∏—Ç–æ–≥)"]
    values = [rev, -returns_rub, -commission_rub, -promo_rub, -cogs_rub, rev - returns_rub - commission_rub - promo_rub - cogs_rub]
    st.plotly_chart(charts.waterfall(labels, values, title="Unit Econ: –º–æ—Å—Ç–∏–∫ –ø–æ SKU"), use_container_width=True)


def page_unit_econ():
    st.markdown("### üßÆ Unit Economics")
    sku = st.selectbox("SKU", options=sku_list, index=0, key="ue_sku")

    row = analytics.loc[analytics["sku"] == sku]
    if row.empty:
        st.info("–ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É SKU.")
        return
    r = row.iloc[0]

    # –í–æ–¥–æ–ø–∞–¥ –ø–æ —Å–æ—Å—Ç–∞–≤—É —Ü–µ–Ω—ã/–µ–¥.
    price = float(r.get("avg_net_price_per_unit", 0.0))
    prod = float(r.get("production_cost_per_unit", 0.0))
    comm = float(r.get("commission_per_unit", 0.0))
    promo = float(r.get("promo_per_unit", 0.0))
    margin_u = float(r.get("margin_per_unit", price - prod - comm - promo))

    df = pd.DataFrame({
        "component": ["–¶–µ–Ω–∞ (–Ω–µ—Ç—Ç–æ)", "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–ö–æ–º–∏—Å—Å–∏—è", "–ü—Ä–æ–º–æ", "–ú–∞—Ä–∂–∞/–µ–¥."],
        "value": [price, -prod, -comm, -promo, margin_u]
    })
    fig_bar = charts.bar(df, x="component", y="value", title="–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏")
    st.plotly_chart(fig_bar, use_container_width=True)

    # –ü–æ—Ä–æ–≥ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏
    be = float(r.get("break_even_price", prod + comm + promo))
    st.info(f"–¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏: **{_format_money(be)}** –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É.")


def page_abc_xyz():
    st.markdown("### üß≠ ABC / XYZ")
    # –¢–∞–±–ª–∏—á–Ω—ã–µ —Ä–∞–∑—Ä–µ–∑—ã
    cols = st.columns(2)
    with cols[0]:
        st.markdown("#### ABC –ø–æ –≤—ã—Ä—É—á–∫–µ")
        if "ABC_class" in analytics.columns:
            st.dataframe(analytics["ABC_class"].value_counts().rename_axis("class").to_frame("SKUs"))
        else:
            st.info("–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ ABC_class")

    with cols[1]:
        st.markdown("#### XYZ –ø–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–ø—Ä–æ—Å–∞")
        if "XYZ_class" in analytics.columns:
            st.dataframe(analytics["XYZ_class"].value_counts().rename_axis("class").to_frame("SKUs"))
        else:
            st.info("–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ XYZ_class")

    # –ö–æ–º–±–æ-–º–∞—Ç—Ä–∏—Ü–∞
    if {"ABC_class", "XYZ_class"}.issubset(analytics.columns):
        st.markdown("#### –ú–∞—Ç—Ä–∏—Ü–∞ ABC√óXYZ (—á–∏—Å–ª–æ SKU)")
        mat = (
            analytics.groupby(["ABC_class", "XYZ_class"])["sku"].count()
            .rename("count").reset_index().pivot(index="ABC_class", columns="XYZ_class", values="count").fillna(0).astype(int)
        )

        # –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ –ø–æ SKU (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏)
        cols_full = [c for c in ["sku", "total_rev", "margin", "ABC_class", "XYZ_class"] if c in analytics.columns]
        if set(["sku", "ABC_class"]).issubset(analytics.columns) and cols_full:
            st.markdown("#### –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ SKU —Å ABC/XYZ")
            st.dataframe(analytics[cols_full].sort_values("total_rev", ascending=False), use_container_width=True)

        # –í—ã—Ä—É—á–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º ABC –∏ XYZ
        if {"ABC_class", "total_rev"}.issubset(analytics.columns):
            st.plotly_chart(charts.bar(
                analytics.groupby("ABC_class", as_index=False)["total_rev"].sum(),
                x="ABC_class", y="total_rev", title="–í—ã—Ä—É—á–∫–∞ –ø–æ ABC"
            ), use_container_width=True)
        if {"XYZ_class", "total_rev"}.issubset(analytics.columns):
            st.plotly_chart(charts.bar(
                analytics.groupby("XYZ_class", as_index=False)["total_rev"].sum(),
                x="XYZ_class", y="total_rev", title="–í—ã—Ä—É—á–∫–∞ –ø–æ XYZ"
            ), use_container_width=True)

        st.dataframe(mat)


def page_inventory():
    st.markdown("### üè≠ –û—Å—Ç–∞—Ç–∫–∏ –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å")
    have_inv_cols = [c for c in ["ending_stock", "average_inventory", "inventory_turnover", "opening_stock", "incoming", "outgoing"] if c in analytics.columns]
    if not have_inv_cols:
        st.info("–í analytics –Ω–µ—Ç —Å–∫–ª–∞–¥—Å–∫–∏—Ö –∫–æ–ª–æ–Ω–æ–∫. –î–æ–±–∞–≤—å—Ç–µ inventory –≤ GOLD (—Å–º. build_gold.py).")
        return

    # KPI –ø–æ –≤—Å–µ–º SKU
    end_sum = float(analytics.get("ending_stock", pd.Series(dtype=float)).sum()) if "ending_stock" in analytics.columns else 0.0
    avg_inv_sum = float(analytics.get("average_inventory", pd.Series(dtype=float)).sum()) if "average_inventory" in analytics.columns else 0.0
    inv_turn = float(analytics.get("inventory_turnover", pd.Series(dtype=float)).mean()) if "inventory_turnover" in analytics.columns else 0.0
    kpi_row([
        {"title": "–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –∫–æ–Ω–µ—Ü (—Å—É–º–º–∞—Ä–Ω–æ)", "value": f"{int(end_sum):,}".replace(",", " ")},
        {"title": "–°—Ä–µ–¥–Ω–∏–π –∑–∞–ø–∞—Å (—Å—É–º–º–∞—Ä–Ω–æ)", "value": f"{int(avg_inv_sum):,}".replace(",", " ")},
        {"title": "–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å (—Å—Ä.)", "value": f"{inv_turn:.2f}"},
    ])

    # –¢–û–ü –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
    if "ending_stock" in analytics.columns:
        top_end = analytics.sort_values("ending_stock", ascending=False).head(20)[["sku", "ending_stock", "average_inventory", "inventory_turnover"]]
        st.markdown("#### –¢–æ–ø-20 –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º")
        st.dataframe(top_end)

    # –§–∏–ª—å—Ç—Ä –ø–æ SKU –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä—è–¥–∞
    sku = st.selectbox("SKU", options=sku_list, index=0, key="inv_sku")
    sub = analytics.loc[analytics["sku"] == sku]
    st.markdown("#### –ü—Ä–æ—Ñ–∏–ª—å SKU")
    st.dataframe(sub[[c for c in have_inv_cols + ["sku"] if c in sub.columns]])


def page_what_if():
    st.markdown("### üß™ What-if")
    if mc is None:
        st.info("–ú–æ–¥—É–ª—å monte_carlo.py –Ω–µ –Ω–∞–π–¥–µ–Ω; —Ä–∞–∑–¥–µ–ª What‚Äëif (–ú–æ–Ω—Ç–µ‚Äë–ö–∞—Ä–ª–æ) –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    tab_mc, tab_plan = st.tabs(["–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ (—Ä–∏—Å–∫-–º–∞—Ä–∂–∞)", "–ü—Ä–æ–≥–Ω–æ–∑/–ü–ª–∞–Ω"])

    # -------- –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ --------
    with tab_mc:
        st.markdown("#### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ä–∂–∏ —Å —É—á—ë—Ç–æ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏")
        st.caption("–°—ç–º–ø–ª–∏—Ä—É–µ–º —Ü–µ–Ω—É/–∫–æ–º–∏—Å—Å–∏—é/–ø—Ä–æ–º–æ/–≤–æ–∑–≤—Ä–∞—Ç—ã –≤–æ–∫—Ä—É–≥ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö; –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ä–∂–∏ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –∏ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é.")

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
        n_sims = st.slider("–ß–∏—Å–ª–æ —Å–∏–º—É–ª—è—Ü–∏–π", min_value=1_000, max_value=100_000, value=20_000, step=1_000)
        seed = st.number_input("Seed (–¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏)", value=42)

        st.markdown("##### –î–æ–ø—É—â–µ–Ω–∏—è (–¥–µ–ª—å—Ç—ã, –≤ **–ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö**)")
        c1, c2, c3, c4 = st.columns(4)
        with c1:
            price_drift_pp = st.number_input("–°–¥–≤–∏–≥ —Ü–µ–Ω—ã, %", value=0.0, step=0.5, help="+3 = +3 –ø.–ø. –∫ —Ü–µ–Ω–µ")
        with c2:
            promo_delta_pp = st.number_input("–ü—Ä–æ–º–æ + –ø.–ø. –æ—Ç —Ü–µ–Ω—ã", value=0.0, step=0.2)
        with c3:
            comm_delta_pp = st.number_input("–ö–æ–º–∏—Å—Å–∏—è + –ø.–ø. –æ—Ç —Ü–µ–Ω—ã", value=0.0, step=0.2)
        with c4:
            returns_delta_pp = st.number_input("–í–æ–∑–≤—Ä–∞—Ç—ã + –ø.–ø.", value=0.0, step=0.2)

        cfg = mc.MCConfig(n_sims=int(n_sims), seed=int(seed))
        ass = mc.Assumptions(
            price_drift_pp=float(price_drift_pp) / 100.0,
            promo_delta_pp=float(promo_delta_pp) / 100.0,
            commission_delta_pp=float(comm_delta_pp) / 100.0,
            returns_delta_pp=float(returns_delta_pp),
        )

        st.markdown("##### –°–∏–º—É–ª—è—Ü–∏—è –ø–æ SKU")
        sku = st.selectbox("SKU", options=sku_list, index=0, key="mc_sku")
        if st.button("‚ñ∂Ô∏é –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é –ø–æ SKU"):
            try:
                res = mc.simulate_unit_margin(analytics, sku, cfg=cfg, assumptions=ass)
                samples = res["samples"]
                q05, q50, q95 = res["p05"], res["p50"], res["p95"]
                prob_neg = res["prob_negative"]

                kpi_row([
                    {"title": "P05 (–µ–¥.)", "value": _format_money(q05)},
                    {"title": "P50 (–µ–¥.)", "value": _format_money(q50)},
                    {"title": "P95 (–µ–¥.)", "value": _format_money(q95)},
                ])
                kpi_row([{"title": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –º–∞—Ä–∂–∏", "value": _format_pct(100 * prob_neg)}])

                # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
                hist = np.histogram(samples, bins=50)
                hist_df = pd.DataFrame({"bin_left": hist[1][:-1], "count": hist[0]})
                st.plotly_chart(charts.bar(hist_df, x="bin_left", y="count", title="–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –º–∞—Ä–∂–∏/–µ–¥."), use_container_width=True)

                # –°–∫–∞—á–∞—Ç—å —Å—ç–º–ø–ª—ã
                csv = pd.Series(samples, name="unit_margin").to_csv(index=False).encode("utf-8")
                st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (CSV)", data=csv, file_name=f"mc_{sku}.csv", mime="text/csv")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")

        st.markdown("##### –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è")
        st.caption("–£–∫–∞–∂–∏—Ç–µ –æ–±—ä—ë–º—ã –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º SKU ‚Äî –ø–æ—Å—á–∏—Ç–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–π –º–∞—Ä–∂–∏.")

        # –ü—Ä–æ—Å—Ç–æ–π –≤–≤–æ–¥: –≤—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö SKU –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        selected = st.multiselect("SKU –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ", options=sku_list, default=sku_list[:5])
        qty_map: Dict[str, float] = {}
        if selected:
            cols = st.columns(min(4, len(selected)))
            for i, s in enumerate(selected):
                with cols[i % len(cols)]:
                    qty_map[s] = float(st.number_input(f"{s} ‚Äî qty", min_value=0.0, value=100.0, step=10.0))

        if st.button("‚ñ∂Ô∏é –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª—è"):
            try:
                res_p = mc.simulate_portfolio_margin(analytics, qty_map, cfg=cfg)
                samples = res_p["samples"]
                kpi_row([
                    {"title": "P05 (–ø–æ—Ä—Ç—Ñ–µ–ª—å)", "value": _format_money(float(np.quantile(samples, 0.05)))},
                    {"title": "Mean (–ø–æ—Ä—Ç—Ñ–µ–ª—å)", "value": _format_money(float(np.mean(samples)))},
                    {"title": "P95 (–ø–æ—Ä—Ç—Ñ–µ–ª—å)", "value": _format_money(float(np.quantile(samples, 0.95)))},
                ])
                st.info(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–π –º–∞—Ä–∂–∏: **{_format_pct(100 * float((samples < 0).mean()))}**")
                hist = np.histogram(samples, bins=60)
                hist_df = pd.DataFrame({"bin_left": hist[1][:-1], "count": hist[0]})
                st.plotly_chart(charts.bar(hist_df, x="bin_left", y="count", title="–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–π –º–∞—Ä–∂–∏"), use_container_width=True)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")

    # -------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ / –ü—Ä–æ–≥–Ω–æ–∑ --------
    with tab_plan:
        st.markdown("#### –ü—Ä–æ–≥–Ω–æ–∑ –∏ –ø–ª–∞–Ω (ForecastPlanner)")
        if ForecastPlanner is None or PlannerAssumptions is None:
            st.info("–ú–æ–¥—É–ª—å planner.py –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–µ–∑ –Ω—É–∂–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç `ForecastPlanner` –∏ `Assumptions`.")
            return

        st.caption("–î–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω—É–∂–Ω—ã –∏—Å—Ö–æ–¥–Ω—ã–µ –≤—ã–≥—Ä—É–∑–∫–∏ (orders/sales/returns/costs). –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º.")
        c1, c2 = st.columns(2)
        with c1:
            orders_path = st.text_input("–§–∞–π–ª –∑–∞–∫–∞–∑–æ–≤ (CSV)", value="")
            sales_path = st.text_input("–û—Ç—á—ë—Ç –æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (XLSX)", value="")
            returns_path = st.text_input("–í–æ–∑–≤—Ä–∞—Ç—ã (XLSX)", value="")
            costs_path = st.text_input("–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (XLSX)", value="")
        with c2:
            planned_inbound = st.text_input("–ü–ª–∞–Ω –ø–æ—Å—Ç–∞–≤–æ–∫ (XLSX, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", value="")
            horizon = st.number_input("–ì–æ—Ä–∏–∑–æ–Ω—Ç (–º–µ—Å.)", min_value=1, max_value=12, value=3, step=1)
            model = st.selectbox("–ú–æ–¥–µ–ª—å", options=["ets", "arima"], index=0)
            backtest = st.number_input("Backtest (–ø–æ—Å–ª–µ–¥–Ω. –º–µ—Å.)", min_value=0, max_value=12, value=0, step=1)

        st.markdown("##### –î–æ–ø—É—â–µ–Ω–∏—è (–≤ %)")
        c1, c2, c3, c4 = st.columns(4)
        with c1:
            p_drift = st.number_input("–°–¥–≤–∏–≥ —Ü–µ–Ω—ã, %", value=0.0, step=0.5)
        with c2:
            p_promo = st.number_input("–ü—Ä–æ–º–æ + –ø.–ø. –∫ —Ü–µ–Ω–µ", value=0.0, step=0.2)
        with c3:
            p_comm = st.number_input("–ö–æ–º–∏—Å—Å–∏—è + –ø.–ø. –∫ —Ü–µ–Ω–µ", value=0.0, step=0.2)
        with c4:
            p_ret = st.number_input("–í–æ–∑–≤—Ä–∞—Ç—ã + –ø.–ø.", value=0.0, step=0.2)

        min_margin_pct = st.number_input("–ü–æ—Ä–æ–≥ –º–∞—Ä–∂–∏ (–º–∏–Ω), %", value=5.0, step=0.5)
        min_batch = st.number_input("–ú–∏–Ω. –ø–∞—Ä—Ç–∏—è, —à—Ç.", value=1, step=1)

        if st.button("‚ñ∂Ô∏é –ü–æ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑/–ø–ª–∞–Ω"):
            try:
                ass = PlannerAssumptions(
                    price_drift=float(p_drift) / 100.0,
                    promo_delta_pp=float(p_promo) / 100.0,
                    commission_delta_pp=float(p_comm) / 100.0,
                    returns_delta_pp=float(p_ret),
                    capacity_limit=None,
                )
                planner = ForecastPlanner(
                    orders_path=Path(orders_path),
                    sales_path=Path(sales_path),
                    returns_path=Path(returns_path),
                    costs_path=Path(costs_path),
                    horizon=int(horizon),
                    model=model,
                    backtest_n=int(backtest),
                    assumptions=ass,
                    planned_inbound_path=Path(planned_inbound) if planned_inbound else None,
                    min_margin_pct=float(min_margin_pct) / 100.0,
                    min_batch=int(min_batch),
                )
                # pipeline
                planner.load_and_prepare()
                planner.forecast_sales()
                planner.compute_future_metrics()
                planner.run_backtest()

                st.success("–ì–æ—Ç–æ–≤–æ ‚úÖ")

                # –í—ã–≤–æ–¥
                if not planner.production_just_df.empty:
                    st.markdown("##### Production Justification (–∏—Ç–æ–≥–∏ –ø–æ SKU)")
                    st.dataframe(planner.production_just_df.sort_values("total_margin", ascending=False))

                if not planner.future_metrics.empty:
                    st.markdown("##### Forecast (–ø–æ–º–µ—Å—è—á–Ω–æ)")
                    st.dataframe(planner.future_metrics.sort_values(["sku", "period"]))

                    # –°–∫–∞—á–∞—Ç—å –∫–∞–∫ CSV
                    buff = io.BytesIO()
                    planner.future_metrics.to_csv(buff, index=False, encoding="utf-8-sig")
                    st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Forecast (CSV)", data=buff.getvalue(), file_name="forecast.csv", mime="text/csv")

                if not planner.backtest_df.empty:
                    st.markdown("##### Backtest (MAPE –ø–æ SKU, —Å—Ä–µ–¥–Ω–µ–µ)")
                    bt_summary = planner.backtest_df.groupby("sku", as_index=False)["mape_sku"].mean().rename(columns={"mape_sku": "MAPE"})
                    st.dataframe(bt_summary.sort_values("MAPE"))

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")


# ---------- –†–µ–Ω–¥–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ----------

# --- Risk (Monte Carlo) standalone page ---

def page_risk():
    st.markdown("### üé≤ Risk (Monte Carlo)")
    if mc is None:
        st.info("–ú–æ–¥—É–ª—å monte_carlo.py –Ω–µ –Ω–∞–π–¥–µ–Ω; —Ä–∞–∑–¥–µ–ª Monte‚ÄëCarlo –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    st.markdown("#### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ä–∂–∏ —Å —É—á—ë—Ç–æ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏")
    st.caption("–°—ç–º–ø–ª–∏—Ä—É–µ–º —Ü–µ–Ω—É/–∫–æ–º–∏—Å—Å–∏—é/–ø—Ä–æ–º–æ/–≤–æ–∑–≤—Ä–∞—Ç—ã –≤–æ–∫—Ä—É–≥ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö; –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ä–∂–∏ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –∏ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é.")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
    n_sims = st.slider("–ß–∏—Å–ª–æ —Å–∏–º—É–ª—è—Ü–∏–π", min_value=1_000, max_value=100_000, value=20_000, step=1_000)
    seed = st.number_input("Seed (–¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏)", value=42)

    st.markdown("##### –î–æ–ø—É—â–µ–Ω–∏—è (–¥–µ–ª—å—Ç—ã, –≤ **–ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö**)")
    c1, c2, c3, c4 = st.columns(4)
    with c1:
        price_drift_pp = st.number_input("–°–¥–≤–∏–≥ —Ü–µ–Ω—ã, %", value=0.0, step=0.5, help="+3 = +3 –ø.–ø. –∫ —Ü–µ–Ω–µ")
    with c2:
        promo_delta_pp = st.number_input("–ü—Ä–æ–º–æ + –ø.–ø. –æ—Ç —Ü–µ–Ω—ã", value=0.0, step=0.2)
    with c3:
        comm_delta_pp = st.number_input("–ö–æ–º–∏—Å—Å–∏—è + –ø.–ø. –æ—Ç —Ü–µ–Ω—ã", value=0.0, step=0.2)
    with c4:
        returns_delta_pp = st.number_input("–í–æ–∑–≤—Ä–∞—Ç—ã + –ø.–ø.", value=0.0, step=0.2)

    cfg = mc.MCConfig(n_sims=int(n_sims), seed=int(seed))
    ass = mc.Assumptions(
        price_drift_pp=float(price_drift_pp) / 100.0,
        promo_delta_pp=float(promo_delta_pp) / 100.0,
        commission_delta_pp=float(comm_delta_pp) / 100.0,
        returns_delta_pp=float(returns_delta_pp),
    )

    st.markdown("##### –°–∏–º—É–ª—è—Ü–∏—è –ø–æ SKU")
    sku = st.selectbox("SKU", options=sku_list, index=0, key="mc_sku_standalone")
    if st.button("‚ñ∂Ô∏é –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é –ø–æ SKU", key="mc_run_sku"):
        try:
            res = mc.simulate_unit_margin(analytics, sku, cfg=cfg, assumptions=ass)
            samples = res["samples"]
            q05, q50, q95 = res["p05"], res["p50"], res["p95"]
            prob_neg = res["prob_negative"]

            kpi_row([
                {"title": "P05 (–µ–¥.)", "value": _format_money(q05)},
                {"title": "P50 (–µ–¥.)", "value": _format_money(q50)},
                {"title": "P95 (–µ–¥.)", "value": _format_money(q95)},
            ])
            kpi_row([{"title": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –º–∞—Ä–∂–∏", "value": _format_pct(100 * prob_neg)}])

            hist = np.histogram(samples, bins=50)
            hist_df = pd.DataFrame({"bin_left": hist[1][:-1], "count": hist[0]})
            st.plotly_chart(charts.bar(hist_df, x="bin_left", y="count", title="–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –º–∞—Ä–∂–∏/–µ–¥."), use_container_width=True)

            csv = pd.Series(samples, name="unit_margin").to_csv(index=False, encoding="utf-8-sig").encode("utf-8")
            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (CSV)", data=csv, file_name=f"mc_{sku}.csv", mime="text/csv")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")

    st.markdown("##### –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è")
    st.caption("–£–∫–∞–∂–∏—Ç–µ –æ–±—ä—ë–º—ã –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º SKU ‚Äî –ø–æ—Å—á–∏—Ç–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–π –º–∞—Ä–∂–∏.")

    selected = st.multiselect("SKU –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ", options=sku_list, default=sku_list[:5], key="mc_portfolio_skus")
    qty_map: Dict[str, float] = {}
    if selected:
        cols = st.columns(min(4, len(selected)))
        for i, s in enumerate(selected):
            with cols[i % len(cols)]:
                qty_map[s] = float(st.number_input(f"{s} ‚Äî qty", min_value=0.0, value=100.0, step=10.0, key=f"qty_{i}"))

    if st.button("‚ñ∂Ô∏é –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª—è", key="mc_run_portfolio"):
        try:
            res_p = mc.simulate_portfolio_margin(analytics, qty_map, cfg=cfg)
            samples = res_p["samples"]
            kpi_row([
                {"title": "P05 (–ø–æ—Ä—Ç—Ñ–µ–ª—å)", "value": _format_money(float(np.quantile(samples, 0.05)))},
                {"title": "Mean (–ø–æ—Ä—Ç—Ñ–µ–ª—å)", "value": _format_money(float(np.mean(samples)))},
                {"title": "P95 (–ø–æ—Ä—Ç—Ñ–µ–ª—å)", "value": _format_money(float(np.quantile(samples, 0.95)))},
            ])
            st.info(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–π –º–∞—Ä–∂–∏: **{_format_pct(100 * float((samples < 0).mean()))}**")
            hist = np.histogram(samples, bins=60)
            hist_df = pd.DataFrame({"bin_left": hist[1][:-1], "count": hist[0]})
            st.plotly_chart(charts.bar(hist_df, x="bin_left", y="count", title="–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–π –º–∞—Ä–∂–∏"), use_container_width=True)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")

if page == "–û–±–∑–æ—Ä":
    page_overview()
elif page == "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç":
    page_assortment()
elif page == "SKU –¥–µ—Ç–∞–ª—å–Ω–æ":
    page_sku_detail()
elif page == "Unit Economics":
    page_unit_econ()
elif page == "ABC/XYZ":
    page_abc_xyz()
elif page == "–û—Å—Ç–∞—Ç–∫–∏":
    page_inventory()
elif page == "Returns Lab":
    page_returns_lab()
elif page == "Pricing & Promo":
    page_pricing_promo()
elif page == "Forecast vs Actual":
    page_fva()
elif page == "Risk (Monte Carlo)":
    page_risk()
elif page == "What-if":
    page_what_if()
elif page == "About & Diagnostics":
    # –µ—Å–ª–∏ –Ω–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ forecast, –ø–µ—Ä–µ–¥–∞–¥–∏–º –ø—É—Å—Ç–æ–π DataFrame
    page_about_diag(fact_daily, fact_monthly, analytics, pd.DataFrame())